/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/payment_pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new transaction */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AwpApiErrorResponse: {
            errorName?: string;
            message?: string;
        };
        /** @description An object containing the billing address information. */
        BillingAddress: {
            /** @description Address line 1 */
            address1?: string;
            /** @description Address line 2 */
            address2?: string;
            /** @description Address line 3 */
            address3?: string;
            /** @description Address city */
            city?: string;
            /** @description The supported ISO 3166-1 alpha-2 country code */
            countryCode?: string;
            /** @description The customer's first name */
            firstName?: string;
            /** @description The customer's last name */
            lastName?: string;
            /** @description Required for all countries except the following: * IE */
            postalCode?: string;
            /** @description Address state or region */
            state?: string;
        };
        /** @description Defines border styling options for elements on the payment page, including color, width, radius and style */
        Border: {
            /** @description Defines border color in HEX format. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            color?: string;
            /** @description Defines border radius in pixels (0-30), must include `px` suffix */
            radius?: string;
            /** @description Border style allowed values: solid, none, dotted, dashed, double */
            style?: string;
            /** @description Defines border width in pixels (0-30), mus5 include `px` suffix */
            width?: string;
        };
        /** @description Defines custom styling options for buttons on the HPP page. Including color, border and text styles */
        Buttons: {
            /** @description Hex color code for background color. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            backgroundColor?: string;
            border?: components["schemas"]["Border"];
            /** @description Hex color code for text color. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            color?: string;
            fonts?: components["schemas"]["Fonts"];
        };
        /** @description Optional object to control skip auto-cancel behavior for CVC mismatch. */
        CancelOn: {
            /**
             * @description Must be `disabled` to skip auto-cancel on CVC mismatch.
             * @example disabled
             */
            cvcNotMatched?: string;
        };
        /** @description An object that instructs us to create a token for the payment details supplied. */
        CreateToken: {
            /** @description A description of your token. If not supplied, a default description is created for you.   */
            description?: string;
            /** @description A namespace is used to group up to 16 cards, e.g. for one customer. A card can exist in more than one namespace. */
            namespace?: string;
            /**
             * @description Used to choose how the customer could opt into their payment details being tokenized.
             *
             *     SILENT - (default value) The card details are always saved (you must already have their consent to do this)
             *
             *     NOTIFY - The card details are always saved (you must already have their consent to do this) and your customer will see this within our hosted payment pages
             *
             *     ASK - The card details are saved if your customer provides their consent. This adds a "Save payment details" tickbox to the page, which they tick to opt-in, or ignore to opt-out.
             *
             * @enum {string}
             */
            optIn: "SILENT" | "NOTIFY" | "ASK";
            /**
             * @description The type of token to be created.
             * @enum {string}
             */
            type: "worldpay";
        };
        /** @description Contains specific customer agreements for the transaction. If this is present, then the creationToken must also be present */
        CustomerAgreement: {
            /**
             * @description How the card is being used.
             *
             * @enum {string}
             */
            storedCardUsage: "first" | "subsequent";
            /**
             * @description The processing arrangement agreed with your customer.
             *
             * @enum {string}
             */
            type: "cardOnFile" | "subscription";
        };
        /** @description Add CSS options for each payment to customize the look and feel of the payment page. */
        Customisation: {
            /** @description Background color for the payment page in hex format. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            backgroundColor?: string;
            buttons?: components["schemas"]["FocusableButtons"];
            /** @description Text color for the payment page in hex format. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            color?: string;
            fonts?: components["schemas"]["Fonts"];
            inputs?: components["schemas"]["FocusableInputs"];
            page?: components["schemas"]["Page"];
        };
        /** @description Defines hover and focus styling for buttons on the HPP page */
        FocusableButtons: {
            /** @description Hex color code for background color. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            backgroundColor?: string;
            border?: components["schemas"]["Border"];
            /** @description Hex color code for text color. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            color?: string;
            focus?: components["schemas"]["Buttons"];
            fonts?: components["schemas"]["Fonts"];
            hover?: components["schemas"]["Buttons"];
        };
        /** @description Defines custom styling for input fields when hovered over or focused */
        FocusableInputs: {
            /** @description Hex color code for background color. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            backgroundColor?: string;
            border?: components["schemas"]["Border"];
            /** @description Hex color code for text color. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            color?: string;
            focus?: components["schemas"]["Inputs"];
            fonts?: components["schemas"]["Fonts"];
            hover?: components["schemas"]["Inputs"];
            placeholder?: components["schemas"]["Placeholder"];
            validation?: components["schemas"]["Validation"];
        };
        /** @description Defines font styling options for text displayed on the payment pages, including the list of preferred font families */
        Fonts: {
            /** @description List of preferred font families for text on the payment page (e.g Arial, Times New Roman). */
            family?: string[];
        };
        Fraud: {
            /**
             * @description You can use this to disable FraudSight for this request.
             * @enum {string}
             */
            type?: "disabled";
        };
        /** @description Add properties customization to allow merchants specify the look of the payment page. */
        HostedProperties: {
            /** @description Change the color displayed on the Apple Pay button. Accepts values: black, white-outline, white. */
            applePayButtonStyle?: string;
            /** @description Change the text displayed on the Apple Pay button. Accepts values: plain, book, buy, check-out, donate, set-up, subscribe, add-money, contribute, order, reload, rent, support, tip, top-up. */
            applePayButtonType?: string;
            /** @description When set to true/false, append the additional information after/before the result URL query string. Accepts boolean values: true or false. */
            disableStrictUrls?: string;
            /** @description Change the color displayed on the Google Pay button. Accepts values: white or black. */
            googlePayButtonColour?: string;
            /** @description Change the text displayed on the Google Pay button. Accepts values: long or short. */
            googlePayButtonLabel?: string;
            /** @description Hidden card and CVC number as they are typed. Accepts boolean values: true or false. */
            maskCardDetails?: string;
            /** @description Append error reasons to the result URL. Accepts boolean values: true or false. */
            passBackErrorReasons?: string;
            /** @description Options to change the payment button text. Accepts values: makePayment, submitPayment, buyNow, payNow, pay, saveAccount, saveCard, save, add, addCard, bookNow, continue */
            paymentButtonLabel?: string;
            /** @description Send url parameters in the callback. Accepts boolean values: true or false. */
            sendURLParameters?: string;
            /** @description Displays the billing address of the customer on the payment pages. Accepts ENUM values: SHOW, HIDE, and EDIT. */
            showBillingAddress?: string;
            /** @description Display the cancel button that lets customer cancel the payment. Accepts boolean values: true or false. */
            showCancelButton?: string;
            /** @description Display logos for card payments on the payment page. Accepts boolean values: true or false. */
            showCardIcons?: string;
            /** @description Display the card holder name on the payment page. Accepts boolean values: true or false. */
            showCardholderName?: string;
            /** @description Display the change payment method button to let customer return to the payment method selection page. Accepts boolean values: true or false. */
            showChangePaymentMethodButton?: string;
            /** @description Displays the contact details of the customer on the payment pages. Accepts ENUM values: SHOW, HIDE, and EDIT. */
            showContactDetails?: string;
            /** @description Displays a drop-down list of countries on the payment pages. Accepts boolean values: true or false. */
            showCountryList?: string;
            /** @description Display the worldpay copyright information footer on the payment page. Accepts boolean values: true or false. */
            showFooter?: string;
            /** @description Display the selected logo and associated space around the logo Accepts boolean values: true or false. */
            showHeader?: string;
            /** @description Displays a drop-down list of languages on the payment pages. Accepts boolean values: true or false. */
            showLanguageList?: string;
            /** @description Display the payment header on the payment page. Accepts boolean values: true or false. */
            showPaymentDetailsHeader?: string;
            /** @description The "Powered by Worldpay" logo (referring to "worldpay" on the payment pages) is displayed while content is being displayed on a payment page. Accepts boolean values: true or false. */
            showPoweredByWorldPay?: string;
            /** @description Displays the shipping address of the customer on the payment pages. Accepts ENUM values: SHOW, HIDE, and EDIT. */
            showShippingAddress?: string;
        };
        /** @description Defines custom styling options for input fields including placeholder text and validation messages */
        Inputs: {
            /** @description Hex color code for background color. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            backgroundColor?: string;
            border?: components["schemas"]["Border"];
            /** @description Hex color code for text color. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            color?: string;
            fonts?: components["schemas"]["Fonts"];
            placeholder?: components["schemas"]["Placeholder"];
            validation?: components["schemas"]["Validation"];
        };
        /** @description The next action link, where merchants can perform certain actions (e.g., querying a payment). */
        Links: {
            self?: components["schemas"]["TransactionResponseLink"];
        };
        /** @description An object that contains information about the merchant. */
        Merchant: {
            /** @description Used to route the request in Access Worldpay, created as part of on-boarding. */
            entity: string;
        };
        /** @description The text that appears on your customer's statement. Used to identify the merchant. */
        Narrative: {
            /** @description line1 is used to provide basic details about the merchant. */
            line1: string;
        };
        /** @description Represents styling and customizations applied to the entire payment page, including colors, fonts, and borders. */
        Page: {
            /** @description Hex color code for background color. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            backgroundColor?: string;
            border?: components["schemas"]["Border"];
            /** @description Hex color code for text color. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            color?: string;
            fonts?: components["schemas"]["Fonts"];
        };
        /** @description An object that contains the payment type and details. */
        PaymentInstrument: {
            /** @description The type of instrument. */
            type: string;
        };
        /** @description Defines styling options for placeholder text in input fields */
        Placeholder: {
            /** @description Hex color code for the placeholder text. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            color?: string;
        };
        /** @description An object containing the different URLs we redirect your customers to when we receive the payment result. We recommend that you provide us with your custom result URLs. */
        ResultURLs: {
            /** @description When your customer cancels a transaction, we redirect that customer to the cancel URL. */
            cancelURL?: string;
            /** @description When we receive the payment result for an erroneous payment, we redirect your customer to the error URL. */
            errorURL?: string;
            /** @description When a customer leaves the payment transaction uncompleted within the maximum allowed time frame, we redirect your customer to the expiry URL. */
            expiryURL?: string;
            /** @description When a payment fails, we redirect your customer to the failure URL. */
            failureURL?: string;
            /** @description When we receive the payment result for a pending payment transaction, we redirect your customer to the pending URL. */
            pendingURL?: string;
            /** @description When we receive the payment result for a successful payment, we redirect your customer to the success URL. */
            successURL?: string;
        };
        /** @description Data used for fraud and risk protection. */
        RiskData: {
            account?: components["schemas"]["RiskDataAccount"];
            custom?: components["schemas"]["RiskDataCustom"];
            shipping?: components["schemas"]["RiskDataShipping"];
            transaction?: components["schemas"]["RiskDataTransaction"];
        };
        /** @description Object containing all customer account related risk data. */
        RiskDataAccount: {
            /** @description The date of birth of the customer. */
            dateOfBirth?: string;
            /** @description The customer's email address. */
            email?: string;
            history?: components["schemas"]["RiskDataHistory"];
            /** @description Indicates whether there's been suspicious activity in the past. */
            previousSuspiciousActivity?: boolean;
            /** @description A unique identifier of the customer. */
            shopperId?: string;
            /** @description The type of account being used by the customer.
             *
             *     guestUser - Order placed without full merchant account registration (no password)
             *
             *     registeredUser- Order placed with full merchant account registration (password entered)
             *
             *     federatedAccount - Using a Federated ID
             *
             *     issuerCredentials- Using issuer credentials
             *
             *     thirdPartyAuthentication - Using third party authentication
             *
             *     fidoAuthenticator - FIDO authentication standard
             *      */
            type?: string;
        };
        /** @description An object containing all data that can be used to configure manual fraud rules. */
        RiskDataCustom: {
            /** @description Custom numeric value you can use to configure manual fraud rules. */
            number1?: string;
            /** @description Custom numeric value you can use to configure manual fraud rules. */
            number2?: string;
            /** @description Custom numeric value you can use to configure manual fraud rules. */
            number3?: string;
            /** @description Custom numeric value you can use to configure manual fraud rules. */
            number4?: string;
            /** @description Custom numeric value you can use to configure manual fraud rules. */
            number5?: string;
            /** @description Custom numeric value you can use to configure manual fraud rules. */
            number6?: string;
            /** @description Custom numeric value you can use to configure manual fraud rules. */
            number7?: string;
            /** @description Custom numeric value you can use to configure manual fraud rules. */
            number8?: string;
            /** @description Custom numeric value you can use to configure manual fraud rules. */
            number9?: string;
            /** @description Custom string value you can use to configure manual fraud rules. */
            string1?: string;
            /** @description Custom string value you can use to configure manual fraud rules. */
            string2?: string;
            /** @description Custom string value you can use to configure manual fraud rules. */
            string3?: string;
            /** @description Custom string value you can use to configure manual fraud rules. */
            string4?: string;
            /** @description Custom string value you can use to configure manual fraud rules. */
            string5?: string;
            /** @description Custom string value you can use to configure manual fraud rules. */
            string6?: string;
            /** @description Custom string value you can use to configure manual fraud rules. */
            string7?: string;
            /** @description Custom string value you can use to configure manual fraud rules. */
            string8?: string;
            /** @description Custom string value you can use to configure manual fraud rules. */
            string9?: string;
        };
        /** @description Provided when the order is being used to purchase a gift card. */
        RiskDataGiftCardsPurchase: {
            /**
             * Format: int32
             * @description The number of gift cards being purchased.
             */
            quantity?: number;
            totalValue?: components["schemas"]["RiskDataTotalValue"];
        };
        /** @description History of the customer's account. */
        RiskDataHistory: {
            /** @description The ISO 8601 date of when the customer's account was created. */
            createdAt?: string;
            /** @description The ISO 8601 date of when the customer's account was last modified. */
            modifiedAt?: string;
            /** @description The ISO 8601 date of when the customer's account password was last modified. */
            passwordModifiedAt?: string;
            /** @description The ISO 8601 date of when the payment account was added to the customer's account. */
            paymentAccountEnrolledAt?: string;
        };
        /** @description Object containing all data related to how the order will be shipped. */
        RiskDataShipping: {
            address?: components["schemas"]["RiskDataShippingAddress"];
            /** @description The email address used for an electronic delivery. */
            email?: string;
            /** @description The first name of the shipping address. */
            firstName?: string;
            /** @description The last name of the shipping address. */
            lastName?: string;
            /** @description The shipping method used.
             *
             *     billingAddress - Ship to customers billing address
             *
             *     verifiedAddress- Ship to another verified address on file with merchant
             *
             *     otherAddress- Ship to address that is different than billing address
             *
             *     store - Ship to store (store address should be populated on request)
             *
             *     digital - Digital goods
             *
             *     unshippedTickets - Travel and event tickets, not shipped
             *
             *     other - Other
             *      */
            method?: string;
            /** @description Indicates whether the customer's name matches the name used for the shipping address. */
            nameMatchesAccountName?: boolean;
            /** @description The timeframe to ship the purchased goods. */
            timeFrame?: string;
        };
        RiskDataShippingAddress: {
            /** @description Address line 1 */
            address1: string;
            /** @description Address line 2 */
            address2?: string;
            /** @description Address line 3 */
            address3?: string;
            /** @description Address city */
            city: string;
            /** @description The supported ISO 3166-1 alpha-2 country code */
            countryCode: string;
            /** @description Address phone number */
            phoneNumber?: string;
            /** @description Address postal code or zip number */
            postalCode: string;
            /** @description Address state or region */
            state?: string;
        };
        /** @description The payment amount. */
        RiskDataTotalValue: {
            /**
             * Format: int32
             * @description The amount being placed on the gift card.
             */
            amount: number;
            /** @description The three character currency code. See list of <a href="https://developer.worldpay.com/products/access/reference/useful-tables/#currency-codes">supported currencies</a>. */
            currency: string;
        };
        /** @description Object containing all customer transaction related risk data. */
        RiskDataTransaction: {
            /** @description Customer's first name. */
            firstName?: string;
            giftCardsPurchase?: components["schemas"]["RiskDataGiftCardsPurchase"];
            history?: components["schemas"]["RiskDataTransactionHistory"];
            /** @description Customer's last name. */
            lastName?: string;
            /** @description Customer's phone number. */
            phoneNumber?: string;
            /** @description Expected ISO 8601 date that a pre-ordered purchase will be available. */
            preOrderDate?: string;
            /** @description Indicates whether this transaction is a reorder of a previous order. */
            reorder?: boolean;
        };
        /** @description Object containing details of the last transaction. */
        RiskDataTransactionHistory: {
            /**
             * Format: int32
             * @description Number of attempts to add a card in the last 24hrs.
             */
            addCardsLastDay?: number;
            /**
             * Format: int32
             * @description Number of transactions (successful or abandoned) for this cardholder account within the last 24 hours.
             */
            attemptsLastDay?: number;
            /**
             * Format: int32
             * @description Number of transactions (successful or abandoned) for this cardholder account within the last year.
             */
            attemptsLastYear?: number;
            /**
             * Format: int32
             * @description Number of purchases with this customer account during the previous six months.
             */
            completedLastSixMonths?: number;
            /** @description The ISO 8601 date of when the shipping address, used for this transaction, was first used. */
            shippingAddressFirstUsedAt?: string;
        };
        /** @description A value when specified allows you to turn auto settlement off. The default behavior is "true" and there is nothing to specify. */
        Settlement: {
            auto?: boolean;
            cancelOn?: components["schemas"]["CancelOn"];
        };
        /** @description Response for when a HPP URL is created. */
        SuccessfulCreateTransactionResponse: {
            _links?: components["schemas"]["Links"];
            /** @description The URL where your customer can be redirected to, to complete their payment. */
            url?: string;
        };
        /** @description An object containing 3DS authentication preferences, which you can use to turn 3DS off. */
        ThreeDS: {
            /**
             * @description The 3DS type.
             * @enum {string}
             */
            type?: "disabled";
        };
        TokenPaymentInstrument: Omit<WithRequired<components["schemas"]["PaymentInstrument"], "type">, "type"> & {
            /** @description The URL to an Access token. We return this after token creation via the API or webhook callback. */
            href: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "card/tokenized";
        };
        /** @description The request used to setup a new HPP URL. */
        Transaction: {
            billingAddress?: components["schemas"]["BillingAddress"];
            createToken?: components["schemas"]["CreateToken"];
            customerAgreement?: components["schemas"]["CustomerAgreement"];
            /** @description A unique value that identifies which customization should be use for this transaction. Set it to null to use the default customization. */
            customisation_id?: string;
            /** @description An optional text, when supplied is displayed to your customer on payment pages. */
            description?: string;
            /**
             * Format: int64
             * @description Allows you to configure the duration, in seconds, your customer can access the payment link.
             * @default 3600
             */
            expiry: number;
            fraud?: components["schemas"]["Fraud"];
            hostedCustomization?: components["schemas"]["Customisation"];
            hostedProperties?: components["schemas"]["HostedProperties"];
            /**
             * @description A BCP 47 locale tag, from the specified list. If set to null or absent from the request, will default to English (en).
             * @enum {string}
             */
            locale?: "ar" | "bg" | "bs" | "ca" | "cs" | "cy" | "da" | "de" | "en" | "el" | "es" | "es-CO" | "et" | "fi" | "fr" | "ga" | "he" | "hi" | "hr" | "hu" | "it" | "ja" | "ko" | "lt" | "lv" | "nl" | "no" | "pl" | "pt" | "pt-BR" | "ro" | "ru" | "si" | "sk" | "sl" | "sv" | "th" | "tr" | "ua" | "zh" | "zh-TW";
            merchant: components["schemas"]["Merchant"];
            narrative: components["schemas"]["Narrative"];
            paymentInstrument?: components["schemas"]["TokenPaymentInstrument"];
            resultURLs?: components["schemas"]["ResultURLs"];
            riskData?: components["schemas"]["RiskData"];
            settlement?: components["schemas"]["Settlement"];
            threeDS?: components["schemas"]["ThreeDS"];
            /** @description A unique reference generated by you that is used to identify a payment throughout its lifecycle. */
            transactionReference: string;
            value: components["schemas"]["Value"];
        };
        TransactionResponseLink: {
            href?: string;
        };
        /** @description Styling properties for validation messages in input fields, including success and error indicators */
        Validation: {
            error?: components["schemas"]["ValidationStatus"];
            ok?: components["schemas"]["ValidationStatus"];
        };
        /** @description Styling properties for validation status messages, defining colors for success or error states */
        ValidationStatus: {
            /** @description Hex color code defining the style of the validation messages. You can use three digit or six digit codes (e.g. #FFO or #DD99CC). */
            color?: string;
        };
        /** @description The payment amount. */
        Value: {
            /**
             * Format: int64
             * @description The payment amount. This is a whole number with an exponent e.g. if exponent is two, 250 is 2.50.
             */
            amount: number;
            /** @description The three character currency code. See list of <a href="https://developer.worldpay.com/products/access/reference/useful-tables/#currency-codes">supported currencies</a>. */
            currency?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    create: {
        parameters: {
            query?: never;
            header: {
                /** @description Used to identify individual requests made to our API. */
                "WP-CorrelationId": string;
                /** @description The name of the client calling the API. */
                "User-Agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description The transaction to create */
        requestBody?: {
            content: {
                "application/vnd.worldpay.payment_pages-v1.hal+json": components["schemas"]["Transaction"];
            };
        };
        responses: {
            /** @description Transaction creation was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.worldpay.payment_pages-v1.hal+json": components["schemas"]["SuccessfulCreateTransactionResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.worldpay.payment_pages-v1.hal+json": components["schemas"]["AwpApiErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.worldpay.payment_pages-v1.hal+json": components["schemas"]["AwpApiErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.worldpay.payment_pages-v1.hal+json": components["schemas"]["AwpApiErrorResponse"];
                };
            };
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
