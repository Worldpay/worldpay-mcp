/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Payment request
         * @description Initiate Payment
         */
        post: operations["payment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{linkData}/3dsDeviceData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Supply 3DS device data
         * @description Gather additional device data
         */
        post: operations["supply3dsDeviceData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{linkData}/3dsChallenges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Continue with payment after 3DS challenge
         * @description Verify authentication challenge
         */
        post: operations["complete3dsChallenge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{linkData}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Payment query request
         * @description Query a payment
         */
        get: operations["queryEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{linkData}/settlements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a payment settle request
         * @description Settle a payment
         */
        post: operations["settle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{linkData}/partialSettlements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a payment partial settle request
         * @description Partially settle a payment
         */
        post: operations["partialSettle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{linkData}/refunds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a payment refund request
         * @description Refund a payment
         */
        post: operations["refund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{linkData}/partialRefunds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a payment partial refund request
         * @description Partially refund a payment
         */
        post: operations["partialRefund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{linkData}/cancellations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a payment cancel request
         * @description Cancel a payment
         */
        post: operations["cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SettleRequest: Record<string, never>;
        /** @description Partially refund the payment. */
        PaymentsActionPartialRefund: {
            href?: string;
            /** @default POST */
            method: string;
        };
        /** @description Fully refund the payment. See [details](../payments-lifecycle/refund) */
        PaymentsActionRefund: {
            href?: string;
            /** @default POST */
            method: string;
        };
        /** @description Return details about the status of the payment */
        PaymentsLink: {
            self?: components["schemas"]["Self"];
        };
        Self: {
            href?: string;
        };
        SettleActionList: {
            refundPayment?: components["schemas"]["PaymentsActionRefund"];
            partiallyRefundPayment?: components["schemas"]["PaymentsActionPartialRefund"];
        };
        SettleResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            _links?: components["schemas"]["PaymentsLink"];
            _actions?: components["schemas"]["SettleActionList"];
        };
        ErrorResponse: {
            errorName?: string;
            message?: string;
        };
        HeaderErrorResponse: {
            errorName?: string;
            message?: string;
            headerName?: string;
        };
        RefundRequest: Record<string, never>;
        RefundResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            _links?: components["schemas"]["PaymentsLink"];
        };
        PaymentsPartialSettleRequest: {
            reference: string;
            sequence?: components["schemas"]["PaymentsSequence"];
            value: components["schemas"]["Value"];
        };
        /** @description The sequence number and total number of expected partial settlement requests for the payment. */
        PaymentsSequence: {
            /** Format: int32 */
            number: number;
            /** Format: int32 */
            total: number;
        };
        Value: {
            /**
             * @description  The three character currency code. See list of <a href="/products/access/reference/supported-countries-currencies#iso-currency-codes">supported currencies</a>
             * @example USD
             */
            currency: string;
            /**
             * Format: int32
             * @description The payment amount. Implied decimal. For example, 250 GBP = Â£2.50
             *     When set to `0` will perform a card verification instead of a payment as part of a new `customerAgreement`.
             * @example 250
             */
            amount: number;
        };
        ValidationErrorResponse: {
            errorName?: string;
            message?: string;
            jsonPath?: string;
            validationErrors?: components["schemas"]["ValidationErrorResponse"][];
        };
        PartialSettleActionList: {
            refundPayment?: components["schemas"]["PaymentsActionRefund"];
            partiallyRefundPayment?: components["schemas"]["PaymentsActionPartialRefund"];
            partiallySettlePayment?: components["schemas"]["PaymentsActionPartialSettle"];
            cancelPayment?: components["schemas"]["PaymentsActionCancel"];
        };
        PartialSettleResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            _links?: components["schemas"]["PaymentsLink"];
            _actions?: components["schemas"]["PartialSettleActionList"];
        };
        /** @description Cancel the payment. See [details](../payments-lifecycle/cancel) */
        PaymentsActionCancel: {
            href?: string;
            /** @default POST */
            method: string;
        };
        /** @description Partially settle the payment. See [details](../payments-lifecycle/partialsettle) including what to add in the request body. */
        PaymentsActionPartialSettle: {
            href?: string;
            /** @default POST */
            method: string;
        };
        PaymentsPartialRefundRequest: {
            reference: string;
            value: components["schemas"]["Value"];
        };
        PartialRefundActionList: {
            partiallyRefundPayment?: components["schemas"]["PaymentsActionPartialRefund"];
        };
        PartialRefundResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            _links?: components["schemas"]["PaymentsLink"];
            _actions?: components["schemas"]["PartialRefundActionList"];
        };
        CancelRequest: Record<string, never>;
        CancelResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            _links?: components["schemas"]["PaymentsLink"];
        };
        DeviceDataRequest: {
            /** @description Add the `sessionId` provided in the [postMessage for the device data collection form (web)](/products/access/payments/enable-features/3ds-authentication/web) or for native (iOS/Android), returned as `consumerSessionId` as part of [SDK initialization](/products/access/payments/enable-features/3ds-authentication/android-ios). <br><br>__Note:__ If device data collection fails you can attempt the payment without this value, but you will see an increased number of `challenged` and even `authenticationFailed` outcomes, if this happens for a lot of requests. */
            collectionReference?: string;
        };
        /** @description Contains suggested next actions for this request. */
        Advice: {
            code?: string;
        };
        /** @description Object that contains authentication related information. */
        Authentication: {
            /**
             * @description The version of 3DS used to process the transaction.
             * @example 2.2.0
             */
            version?: string;
            type?: string;
            authenticationValue?: string;
            /** @description Electronic Commerce Indicator (ECI). Indicates the outcome of the 3DS authentication. */
            eci?: string;
            /** @description A transaction identifier. */
            transactionId?: string;
            /** Format: int32 */
            cryptogramAlgorithm?: number;
            challengePreference?: string;
            authenticationFlow?: string;
            networkScore?: string;
            brand?: string;
        };
        AuthorizationActionList: {
            cancelPayment?: components["schemas"]["PaymentsActionCancel"];
            settlePayment?: components["schemas"]["PaymentsActionSettle"];
            partiallySettlePayment?: components["schemas"]["PaymentsActionPartialSettle"];
        };
        /** @description Contains the billing address information. */
        BillingAddress: {
            /** @description Address line 1 */
            address1: string;
            /** @description Address line 2 */
            address2?: string;
            /** @description Address line 3 */
            address3?: string;
            /** @description
             *      Required for all countries except the following:            * IE */
            postalCode?: string;
            /** @description Address City */
            city: string;
            /** @description Address State */
            state?: string;
            /**
             * Format: ISO 3166-1 alpha-2
             * @description Must be provided in [ISO 3166-1 alpha-2 format](/products/access/reference/supported-countries-currencies#iso-country-codes).
             */
            countryCode: string;
        };
        CardAuthorizedPaymentResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
            paymentInstrument?: components["schemas"]["PaymentsResponsePaymentInstrument"];
            updatedPaymentInstrument?: components["schemas"]["UpdatedPaymentInstrument"];
            issuer?: components["schemas"]["Issuer"];
            /** @description  Any risk factors which have been identified for the authorization. This section will not appear if no risks are identified.  */
            riskFactors?: components["schemas"]["RiskFactor"][];
            fraud?: components["schemas"]["Fraud"];
            threeDS?: components["schemas"]["Verification"];
            exemption?: components["schemas"]["PaymentsExemption"];
            /** @description An object containing information returned by the scheme. */
            schemeReference?: string;
            token?: components["schemas"]["Token"];
            _links?: components["schemas"]["PaymentsLink"];
            _actions?: components["schemas"]["AuthorizationActionList"];
        };
        ChallengeInfo: {
            /** @example uswuxaOZm7onSjO664M1 */
            reference?: string;
            /** @example https://centinelapistag.cardinalcommerce.com/V2/Cruise/StepUp */
            url?: string;
            /** @example
             *
             *
             *
             *
             *     eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJPcmdVbml0SWQiOiI2NjAzMDA3YWJlMjMxZTM1ZTNmNTRjODkiLCJPYmplY3RpZnlQYXlsb2FkIjpmYWxzZSwiaXNzIjoiNjYwMzAwN2ExNmRkOWE3ZTZhMDMzNDA3IiwiUmV0dXJuVXJsIjoiaHR0cDovL3BheW1lbnQuZXhhbXBsZS5jb20iLCJQYXlsb2FkIjoie1wiUGF5bG9hZFwiOlwiZXlKdFpYTnpZV2RsVkhsd1pTSTZJa05TWlhFaUxDSnRaWE56WVdkbFZtVnljMmx2YmlJNklqSXVNUzR3SWl3aWRHaHlaV1ZFVTFObGNuWmxjbFJ5WVc1elNVUWlPaUl4WlRNMllqUmxOeTFoTnpNMExUUXhabU10T0RrMFppMDJaVFU0TWpNMll6WXhaRFlpTENKaFkzTlVjbUZ1YzBsRUlqb2lOR1ZrT1dReU1HUXRZekEwTUMwMFlqbGhMVGd5TUdFdE9ERTFNelUwTlRoaVpqZGxJaXdpWTJoaGJHeGxibWRsVjJsdVpHOTNVMmw2WlNJNklqQTBJbjBcIixcIkFDU1VybFwiOlwiaHR0cHM6XFwvXFwvMW1lcmNoYW50YWNzc3RhZy5jYXJkaW5hbGNvbW1lcmNlLmNvbVxcL01lcmNoYW50QUNTV2ViXFwvY3JlcS5qc3BcIixcIlRyYW5zYWN0aW9uSWRcIjpcInVzd3V4YU9abTdvblNqTzY2NE0xXCJ9IiwiZXhwIjoxNzEyMzE4MjI1LCJpYXQiOjE3MTIzMTc2MjUsImp0aSI6IjJhZmQzYzBjLWYzNzEtNDNkMC1iNTkyLTJhYzY5MjkxODdmOSJ9.cL8rPZkdHmatwrmV990NzmAmPe9nxrp65A8gm6ifprQ */
            jwt?: string;
            /** @example
             *
             *     eyJtZXNzYWdlVHlwZSI6IkNSZXEiLCJtZXNzYWdlVmVyc2lvbiI6IjIuMS4wIiwidGhyZWVEU1NlcnZlclRyYW5zSUQiOiIxZTM2YjRlNy1hNzM0LTQxZmMtODk0Zi02ZTU4MjM2YzYxZDYiLCJhY3NUcmFuc0lEIjoiNGVkOWQyMGQtYzA0MC00YjlhLTgyMGEtODE1MzU0NThiZjdlIiwiY2hhbGxlbmdlV2luZG93U2l6ZSI6IjA0In0 */
            payload?: string;
        };
        ChallengedActionList: {
            complete3dsChallenge?: components["schemas"]["PaymentsActionComplete3dsChallenge"];
        };
        ChallengedResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
            authentication?: components["schemas"]["Authentication"];
            challenge?: components["schemas"]["ChallengeInfo"];
            _actions?: components["schemas"]["ChallengedActionList"];
        };
        ConflictPaymentInstrument: {
            type?: string;
            cardNumber?: string;
            cardHolderName?: string;
            cardExpiryDate?: components["schemas"]["ExpiryDate"];
            billingAddress?: components["schemas"]["BillingAddress"];
        };
        DeviceDataResponse201: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
        };
        /** @description Contains your customer's card or token expiry date. */
        ExpiryDate: {
            /**
             * Format: int32
             * @example 2028
             */
            year: number;
            /**
             * Format: int32
             * @example 6
             */
            month: number;
        };
        /** @description Details of the outcome of the Fraud assessment */
        Fraud: {
            /**
             * @description  outcome of the fraud assessment. `highRisk` outcomes stop the transaction before payment.
             * @enum {string}
             */
            outcome?: "lowRisk" | "highRisk" | "review" | "error" | "lowRisk(silentMode)" | "highRisk(silentMode)" | "review(silentMode)" | "error(silentMode)";
            /**
             * Format: double
             * @description  The score calculated by the fraud assessment, set score thresholds are used to define lowRisk, highRisk and review outcomes
             * @example 44
             */
            score?: number;
        };
        /** @description An object containing information returned by the issuer. */
        Issuer: {
            authorizationCode?: string;
        };
        PaymentRefusedResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
            /** @description Additional context on the refusal. */
            refusalDescription?: string;
            /** @description Response code for the request. */
            refusalCode?: string;
            advice?: components["schemas"]["Advice"];
            paymentInstrument?: components["schemas"]["PaymentsResponsePaymentInstrument"];
            updatedPaymentInstrument?: components["schemas"]["UpdatedPaymentInstrument"];
            /** @description  Any risk factors which have been identified for the authorization. This section will not appear if no risks are identified.  */
            riskFactors?: components["schemas"]["RiskFactor"][];
            fraud?: components["schemas"]["Fraud"];
            threeDS?: components["schemas"]["Verification"];
            exemption?: components["schemas"]["PaymentsExemption"];
            token?: components["schemas"]["Token"];
        };
        /** @description Resume the payment following the 3DS challenge being completed by the customer. See [details](../3ds-actions/complete3dschallenge) */
        PaymentsActionComplete3dsChallenge: {
            href?: string;
            /** @default POST */
            method: string;
        };
        /** @description Fully settle the payment. See [details](../payments-lifecycle/settle) */
        PaymentsActionSettle: {
            href?: string;
            /** @default POST */
            method: string;
        };
        /** @description An object containing information about the exemption. */
        PaymentsExemption: {
            /**
             * @description Was an exemption returned by Worldpay's TRA assessment.
             * @enum {boolean}
             */
            granted?: true | false;
            /**
             * @description Indicates whether the exemption has been placed in a payment authorization request or 3DS authentication request.
             * @enum {string}
             */
            placement?: "authorization";
            /**
             * @description The type of applied exemption.
             * @enum {string}
             */
            type?: "lowRisk" | "lowValue";
            /**
             * @description The result of the exemption placement request.
             * @enum {string}
             */
            result?: "honored" | "outOfScope" | "rejected" | "unknown";
            /**
             * @description The reason returned by the card issuer.
             * @enum {string}
             */
            reason?: "issuerHonored" | "merchantInitiatedTransaction" | "oneLegOut" | "issuerHonored" | "moto" | "contactless" | "issuerRejected" | "highRisk" | "invalid" | "unsupportedScheme" | "unsupportedAcquirer" | "unknown";
        };
        PaymentsResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
        };
        PaymentsResponsePaymentInstrument: {
            type?: string;
            cardBin?: string;
            lastFour?: string;
            countryCode?: string;
            expiryDate?: components["schemas"]["ExpiryDate"];
            cardBrand?: string;
            fundingType?: string;
            category?: string;
            issuerName?: string;
            paymentAccountReference?: string;
        };
        /** @description  Any risk factors which have been identified for the authorization. This section will not appear if no risks are identified.  */
        RiskFactor: {
            /** @enum {string} */
            risk?: "notChecked" | "notMatched" | "notSupplied" | "verificationFailed";
            /** @enum {string} */
            detail?: "address" | "postcode";
            /** @enum {string} */
            type?: "avs" | "cvc" | "riskProfile";
        };
        /** @description Details of the token created */
        Token: {
            /** @example https://try.access.worldpay.com/tokens/eyJrIjoxLCJkIjoiUW5rZHBXZDZ1MzBBY0I0MTVJQUdPeGE3ZkFobE1lTjJyYk05eDZxQUJ2RT0ifQ */
            href?: string;
            /** @example 9997095516055002467 */
            tokenId?: string;
            /** @example 2024-04-12T11:49:56Z */
            tokenExpiryDateTime?: string;
            /** @example 4000********1091 */
            cardNumber?: string;
            /** @example Sherlock Holmes */
            cardHolderName?: string;
            cardExpiry?: components["schemas"]["ExpiryDate"];
            /** @example 400000 */
            bin?: string;
            /** @example debit */
            fundingType?: string;
            countryCode?: string;
            /** @example 060720116005060 */
            schemeReference?: string;
            conflicts?: components["schemas"]["TokenResponseConflicts"];
        };
        TokenResponseConflicts: {
            conflictsExpiryDateTime?: string;
            schemeReference?: string;
            paymentInstrument?: components["schemas"]["ConflictPaymentInstrument"];
        };
        UnsuccessfulAuthenticationResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
            authentication?: components["schemas"]["Authentication"];
        };
        /** @description Details of the updated payment instrument. */
        UpdatedPaymentInstrument: {
            /** @description Returned if the payment instrument was swapped for a network token. */
            appliedNetworkToken?: boolean;
            /**
             * @example card/plain+masked
             * @enum {string}
             */
            type?: "card/plain" | "card/plain+masked";
            /**
             * @description Details on the type of payment instrument update.
             * @example The account number was changed
             * @enum {string}
             */
            accountUpdaterMessage?: "The merchant is not registered in the update program" | "The account number was changed" | "The account was closed" | "The expiry was changed" | "The issuing bank does not participate in the update program" | "Contact the cardholder for updated information" | "No match found" | "The account number was changed";
            cardNumber?: string;
            /**
             * @description The updated card BIN (Bank Identification Number).
             * @example 444433
             */
            cardBin?: string;
            /**
             * @description The four digits of the updated card. Some characters may be obfuscated with a * if the PAN length is less than 16 characters.
             * @example 1111
             */
            lastFour?: string;
            expiryDate?: components["schemas"]["ExpiryDate"];
            /** @description The brand of the updated card. In rare circumstances a card may be reissued under a different brand. */
            cardBrand?: string;
            /** @description How the card is funded. */
            fundingType?: string;
            countryCode?: string;
        };
        /** @description Details of the outcome of the 3DS authentication */
        Verification: {
            /**
             * @description If the request was authenticated successfully or an authentication outage exemption was applied in authorization. See details on [Authentication Outage](/products/access/payments/enable-features/3ds-authentication#how-to-enable-authentication-outage-exemptions)
             * @default authenticated
             * @enum {string}
             */
            outcome: "authenticated" | "authenticationOutage";
            /**
             * @description If the issuer decides to challenge the customer or proceed (frictionless)
             * @enum {unknown}
             */
            issuerResponse?: "frictionless" | "challenged";
            /** @description The version of 3DS used to process the transaction. */
            version?: string;
            /** @description Electronic Commerce Indicator (ECI). Indicates the outcome of the 3DS authentication.
             *
             *     | ECI | Meaning |
             *     | --- | --- |
             *     | 02 or 05 | Fully Authenticated Transaction
             *     | 01 or 06 | Attempted Authentication Transaction
             *     | 00 or 07 | Non 3-D Secure Transaction
             *
             *     | Scheme | Value |
             *     | --- | --- |
             *     | Mastercard | 02, 01, 00 |
             *     | Visa | 05, 06, 07 |
             *     | Amex | 05, 06, 07 |
             *     | JCB | 05, 06, 07 |
             *     | Diners | 05, 06, 07 | */
            eci?: string;
            /** @description An identifier assigned by the Access Control Server (ACS) to identify a single transaction. Used primarily for Mastercard 3RI subsequent transactions to link the subsequent transaction back to a previous cardholder authentication. Can be disregarded unless otherwise needed. */
            acsTransactionId?: string;
            /** @description Directory server transaction Id, if provided should be used in the payment authorization authentication object. */
            dsTransactionId?: string;
            /** @description Indicates the outcome of the authentication or verification request.
             *     - `Y` - Successful authentication
             *     - `N` - Failed authentication
             *     - `U` - Unable to complete authentication
             *     - `A` - Successful attempts authentication
             *     - `C` - Challenged authentication
             *     - `R` - Authentication rejected (merchant _must not_ submit for authorization)
             *     - `I` - Exemption acknowledged
             *      */
            status?: string;
            /** @description Indicates the preferred challenge behavior. __Returned for Cartes Bancaires authentications only__ and must be applied in the following authorization request.
             *     - `noPreference`
             *     - `noChallengeRequested`
             *     - `challengeRequested`
             *     - `challengeMandated`
             *     - `noChallengeRequestedTRAPerformed` */
            challengePreference?: string;
        };
        DeviceDataResponse202: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
        };
        SentForCancellationResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
            paymentInstrument?: components["schemas"]["PaymentsResponsePaymentInstrument"];
            updatedPaymentInstrument?: components["schemas"]["UpdatedPaymentInstrument"];
            issuer?: components["schemas"]["Issuer"];
            /** @description  Any risk factors which have been identified for the authorization. This section will not appear if no risks are identified.  */
            riskFactors?: components["schemas"]["RiskFactor"][];
            fraud?: components["schemas"]["Fraud"];
            threeDS?: components["schemas"]["Verification"];
            exemption?: components["schemas"]["PaymentsExemption"];
            /** @description An object containing information returned by the scheme. */
            schemeReference?: string;
            token?: components["schemas"]["Token"];
            _links?: components["schemas"]["PaymentsLink"];
        };
        SentForSettlementActionList: {
            refundPayment?: components["schemas"]["PaymentsActionRefund"];
            partiallyRefundPayment?: components["schemas"]["PaymentsActionPartialRefund"];
        };
        SentForSettlementResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
            paymentInstrument?: components["schemas"]["PaymentsResponsePaymentInstrument"];
            updatedPaymentInstrument?: components["schemas"]["UpdatedPaymentInstrument"];
            issuer?: components["schemas"]["Issuer"];
            /** @description  Any risk factors which have been identified for the authorization. This section will not appear if no risks are identified.  */
            riskFactors?: components["schemas"]["RiskFactor"][];
            fraud?: components["schemas"]["Fraud"];
            threeDS?: components["schemas"]["Verification"];
            exemption?: components["schemas"]["PaymentsExemption"];
            /** @description An object containing information returned by the scheme. */
            schemeReference?: string;
            token?: components["schemas"]["Token"];
            _links?: components["schemas"]["PaymentsLink"];
            _actions?: components["schemas"]["SentForSettlementActionList"];
        };
        ChallengeResponse202: Record<string, never>;
        ChallengeResponse201: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
        };
        /** @description Customer account history. */
        AccountHistory: {
            /** @description Date the customer account was created. */
            createdAt?: string;
            /** @description Date the customer account was last modified. */
            modifiedAt?: string;
            /** @description Date the password for the customer account was last modified. */
            passwordModifiedAt?: string;
            /** @description Date the payment account was added to the cardholder account. */
            paymentAccountEnrolledAt?: string;
        };
        ApplepayPaymentsInstruction: {
            /**
             * @description The method of instruction.
             * @enum {string}
             */
            method: "applepay";
            paymentInstrument: {
                /**
                 * @description The type of instrument.
                 * @enum {string}
                 */
                type: "encrypted";
                walletToken: string;
                billingAddress?: components["schemas"]["BillingAddress"];
            };
            narrative: components["schemas"]["Narrative"];
            value: components["schemas"]["Value"];
            /** @description A flag which identifies a payment as being for the purpose of repaying a debt. */
            debtRepayment?: boolean;
            exemption?: components["schemas"]["Exemption"];
            settlement?: components["schemas"]["Settlement"];
            customer?: components["schemas"]["Customer"];
            shipping?: components["schemas"]["Shipping"];
            recipient?: components["schemas"]["PaymentsRecipient"];
            /** @description An attribute that identifies a bill payment paid by providers on behalf of consumers. If you are registered with Visa as a Consumer of the Bill Payment Service (CBPS), you must set this to `true` for any payments associated with the CBPS. */
            consumerBillPayment?: boolean;
            /** @description Allows you to request a real-time account update (Visa cards only) when using a previously stored card. You can only use this on subsequent card requests. */
            requestAccountUpdater?: boolean;
        };
        /** @description Configuration for when a payment is `sentForCancellation` automatically. */
        Cancellation: {
            /**
             * @description By default a payment will be `sentForCancellation` if the CVC is `notMatched`, set `disabled` to continue with `sentForSettlement`.
             * @enum {string}
             */
            cvcNotMatched?: "enabled" | "disabled";
            /**
             * @description By default a payment will be `sentForCancellation` if the `address` or `postcode` AVS is `notMatched`, set `disabled` to continue with `sentForSettlement`.
             * @enum {string}
             */
            avsNotMatched?: "enabled" | "disabled";
        };
        CardPaymentInstrument: {
            /** @description The type of instrument. */
            type: string;
        };
        CardPaymentsInstruction: {
            /**
             * @description The method of instruction.
             * @enum {string}
             */
            method: "card";
            paymentInstrument: {
                /** @description The type of instrument. */
                type: string;
            };
            narrative: components["schemas"]["Narrative"];
            tokenCreation?: components["schemas"]["TokenCreation"];
            value: components["schemas"]["Value"];
            /** @description A flag which identifies a payment as being for the purpose of repaying a debt. */
            debtRepayment?: boolean;
            fraud?: components["schemas"]["PaymentsFraud"];
            threeDS?: components["schemas"]["PaymentsThreeDS"];
            exemption?: components["schemas"]["Exemption"];
            settlement?: components["schemas"]["Settlement"];
            customer?: components["schemas"]["Customer"];
            shipping?: components["schemas"]["Shipping"];
            customerAgreement?: components["schemas"]["PaymentsCustomerAgreement"];
            recipient?: components["schemas"]["PaymentsRecipient"];
            /** @description An attribute that identifies a bill payment paid by providers on behalf of consumers. If you are registered with Visa as a Consumer of the Bill Payment Service (CBPS), you must set this to `true` for any payments associated with the CBPS. */
            consumerBillPayment?: boolean;
            /** @description Allows you to request a real-time account update (Visa cards only) when using a previously stored card. You can only use this on subsequent card requests. */
            requestAccountUpdater?: boolean;
            fundsTransfer?: components["schemas"]["PaymentsFundsTransfer"];
        };
        /** @description An object containing 3DS challenge preferences and configuration. */
        Challenge: {
            /** @description  Once the customer completes the challenge page the issuer redirects/posts to the returnUrl in order for you to resume the session. It must be the full URL path.   */
            returnUrl: string;
            /**
             * @description  Specify the challenge window size (width x height) that the issuer should use. This is to better tailor the experience to the customers device. Default is 390x400.
             * @default 390x400
             * @enum {string}
             */
            windowSize: "250x400" | "390x400" | "600x400" | "500x600" | "fullPage";
            /**
             * @description  Set a preference for how the Issuer decides on a 3DS challenge.
             * @enum {string}
             */
            preference?: "noPreference" | "noChallengeRequested" | "challengeRequested" | "challengeMandated";
        };
        /** @description Additional values specific to your order that can be used to create manual fraud rules. */
        Custom: {
            /** Format: int32 */
            number1?: number;
            /** Format: int32 */
            number2?: number;
            /** Format: int32 */
            number3?: number;
            /** Format: int32 */
            number4?: number;
            /** Format: int32 */
            number5?: number;
            /** Format: int32 */
            number6?: number;
            /** Format: int32 */
            number7?: number;
            /** Format: int32 */
            number8?: number;
            /** Format: int32 */
            number9?: number;
            string1?: string;
            string2?: string;
            string3?: string;
            string4?: string;
            string5?: string;
            string6?: string;
            string7?: string;
            string8?: string;
            string9?: string;
        };
        Customer: {
            /** @description Unique identifier used by the ecommerce system for the customer. */
            customerId?: string;
            /** @description Customer's first name. */
            firstName?: string;
            /** @description Customer's last name. */
            lastName?: string;
            /** @description Customer's phone number. */
            phone?: string;
            /**
             * Format: date
             * @description Customer's date of birth.
             */
            dateOfBirth?: string;
            /** @description Customers's email address used for the ecommerce account. */
            email?: string;
            /** @description  A unique identifier for your customer's physical location that
             *                 can be used by the issuer in risk analysis. Must be in IPv4 or IPv6 format.
             *     E.g. 192.0.0.0.  */
            ipAddress?: string;
            /** @description Required for domestic processing in some Latin American countries. */
            documentReference?: string;
        };
        /** @description An object containing device data for 3DS & Fraud assessment. */
        DeviceData: {
            /** @description  Used by the issuer to check if the customer's browser is compatible with the issuer 3DS challenge display.  */
            acceptHeader: string;
            /** @description  Used by issuers as part of risk analysis and correctly displaying the challenge. Must conform to RFC 7321.  */
            userAgentHeader: string;
            /** @description  Your customer's browser language that can be used by the issuer in risk analysis. Must conform to the language tags defined by IETF. E.g. en-GB, fr-FR.  */
            browserLanguage?: string;
            /** @description Defines whether Java is enabled on your customers browser. */
            browserJavaEnabled?: boolean;
            /**
             * @description The color depth of your customers browser
             * @enum {string}
             */
            browserColorDepth?: "1" | "4" | "8" | "15" | "16" | "24" | "32" | "48";
            /**
             * Format: int32
             * @description Defines the pixel height of the customers browser.
             */
            browserScreenHeight?: number;
            /**
             * Format: int32
             * @description Defines the pixel width of the customers browser.
             */
            browserScreenWidth?: number;
            /** @description  Time zone offset in minutes between UTC and your customer's browser local time.
             *     Example time zone offset values in minutes:
             *     If UTC -5 hours:
             *     `300`
             *     `+300`
             *     If UTC +5 hours:
             *     `-300`
             *       */
            timeZone?: string;
            /** @description Defines whether Javascript is enabled on your customers browser. */
            browserJavascriptEnabled?: boolean;
            /**
             * @description Determines the channel that the transaction came through. `native` should only be set if using the Cardinal 3DS SDK (iOS/Android)
             * @enum {string}
             */
            channel?: "browser" | "native";
        };
        /** @description An object used to request or specify an SCA Exemption.
         *
         *     Read more on how to set it up under our [__SCA Exemptions__](/products/access/payments/enable-features/sca-exemptions) guide. */
        Exemption: {
            /**
             * @description Ask for an SCA exemption recommendation directly from Worldpay (integrated) or use a 3rd party TRA solution.<br>__Note:__ Only type `integrated` is supported for now.
             * @enum {string}
             */
            type: "integrated";
            /**
             * @description Specify which transactions to request SCA Exemptions for.
             * @enum {string}
             */
            mode: "always";
            /**
             * @description Indicates whether the exemption requested from Worldpay can return a placement of authorization (payment) and/or authentication (3DS).<br>__Note:__ Only exemptions in authorization are supported for now.
             * @enum {string}
             */
            capability: "authorizationOnly";
        };
        GooglepayPaymentsInstruction: {
            /**
             * @description The method of instruction.
             * @enum {string}
             */
            method: "googlepay";
            paymentInstrument: {
                /**
                 * @description The type of instrument.
                 * @enum {string}
                 */
                type: "encrypted";
                walletToken: string;
                billingAddress?: components["schemas"]["BillingAddress"];
            };
            narrative: components["schemas"]["Narrative"];
            value: components["schemas"]["Value"];
            /** @description A flag which identifies a payment as being for the purpose of repaying a debt. */
            debtRepayment?: boolean;
            exemption?: components["schemas"]["Exemption"];
            settlement?: components["schemas"]["Settlement"];
            customer?: components["schemas"]["Customer"];
            shipping?: components["schemas"]["Shipping"];
            recipient?: components["schemas"]["PaymentsRecipient"];
            /** @description An attribute that identifies a bill payment paid by providers on behalf of consumers. If you are registered with Visa as a Consumer of the Bill Payment Service (CBPS), you must set this to `true` for any payments associated with the CBPS. */
            consumerBillPayment?: boolean;
            /** @description Allows you to request a real-time account update (Visa cards only) when using a previously stored card. You can only use this on subsequent card requests. */
            requestAccountUpdater?: boolean;
        };
        /** @description Required only for `latinAmerica` installment type. Not allowed for `merchant` installment type. */
        InstallmentPlan: {
            /**
             * Format: int32
             * @description Number of installments that the requested amount should be broken into.
             */
            numberOfInstallments: number;
        };
        /** @description An object that contains information about the merchant. */
        Merchant: {
            /**
             * @description  Used to route the request in Access Worldpay, created as part of on-boarding.
             * @example default
             */
            entity: string;
            /** @description  You can apply a merchant category code (mcc) to an individual request. You can only provide an mcc if we have enabled the dynamic mcc feature during boarding. If enabled but not provided, merchant.mcc defaults to a configured value.  */
            mcc?: string;
            paymentFacilitator?: components["schemas"]["PaymentsPaymentFacilitator"];
        };
        /** @description The text that appears on your customer's statement. Used to identify the merchant. */
        Narrative: {
            /** @description line1 is used to provide basic details about the merchant. */
            line1: string;
            /** @description  line2 is used for additional context about the payment or merchant. E.g. Order number or Merchant phone number.  */
            line2?: string;
        };
        PaymentRequest: {
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference: string;
            merchant: components["schemas"]["Merchant"];
            instruction: components["schemas"]["PaymentsInstruction"];
            /**
             * @description Interaction between the cardholder and you. Supply a value of `ecom` to process an eCommerce authorization. Supply a value of `moto` to process an authorization as a [__Mail Order or Telephone Order__](/products/access/payments/enable-features/moto) transaction.
             *
             *     __Note: 3DS authentication cannot be supplied for MOTO payments__.
             * @enum {string}
             */
            channel?: "ecom" | "moto";
        };
        PaymentsBankAccount: Omit<WithRequired<components["schemas"]["PaymentsRecipientAccount"], "type">, "type"> & {
            /** @enum {string} */
            type: "bankAccount";
            /** @enum {string} */
            identifierType: "iban" | "swift" | "routingNumber";
            /**
             * @description The International Bank Account Number (IBAN) of the recipient. Required if `identifierType` is `iban`
             * @example IE12BOFI90000112345678
             */
            iban?: string;
            /**
             * @description The account number of the recipient. Required if `identifierType` is `routingNumber` or `swift`
             * @example 01234567
             */
            accountNumber?: string;
            /**
             * @description The SWIFT Bank Identification Code (BIC) of the recipient. Required if `identifierType` is `swift`. Must be either 8 or 11 alphanumeric characters.
             * @example BEASUS33xxx
             */
            swiftBic?: string;
            /**
             * @description The ABA (American Bankers Association) Routing Transit Number (RTN). Identifies the Financial Insititution of the recipient's account. Required if `identifierType` is `routingNumber`. Must be 9 numeric characters.
             * @example 111000025
             */
            routingNumber?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "bankAccount";
        };
        PaymentsCardAccount: Omit<WithRequired<components["schemas"]["PaymentsRecipientAccount"], "type">, "type"> & {
            /** @enum {string} */
            type: "card";
            /** @description Recipient's card number. */
            cardNumber: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "card";
        };
        PaymentsCardOnFileCustomerAgreement: Omit<WithRequired<components["schemas"]["PaymentsCustomerAgreement"], "type">, "type"> & {
            /** @enum {string} */
            type: "cardOnFile";
            /**
             * @description  Set to `first` to store a card or `subsequent` to use a previously stored card.
             * @enum {string}
             */
            storedCardUsage: "first" | "subsequent";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cardOnFile";
        };
        PaymentsCardPlainPaymentInstrument: {
           
            /** @enum {string} */
            type: "plain";
            /**
             * @description Customer's card number.
             * @example 4000000000001091
             */
            cardNumber: string;
            /**
             * @description
             *
             *     The name on your customer's card. Required if  instruction.tokenCreation is present. However we recommend that you supply this to improve authentication rates.
             * @example Sherlock Holmes
             */
            cardHolderName?: string;
            expiryDate: components["schemas"]["ExpiryDate"];
            /**
             * @description
             *
             *     CVC is a unique set of 3 or 4 numbers on the back of the card. Our API checks to see if the CVC supplied matches the CVC held by the issuing bank.
             * @example 123
             */
            cvc?: string;
            billingAddress?: components["schemas"]["BillingAddress"];
            routing?: components["schemas"]["Routing"];
        };
        /** @description  Contains specific customer agreements for the transaction.  */
        PaymentsCustomerAgreement: {
            /** @description The processing arrangement agreed with your customer. */
            type: string;
        };
        PaymentsEmailAccount: Omit<WithRequired<components["schemas"]["PaymentsRecipientAccount"], "type">, "type"> & {
            /** @enum {string} */
            type: "email";
            /** @description Recipient's email address. */
            emailAddress: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "email";
        };
        /** @description Fraud assessment to detect potential fraud and prevent the transaction from proceeding.
         *
         *     Read more on how to set it up under our [__Fraud Assessment__](/products/access/payments/enable-features/fraud-assessment) guide. */
        PaymentsFraud: {
            /**
             * @description Enable a FraudSight risk assessment
             * @default fraudSight
             * @enum {string}
             */
            type: "fraudSight";
            /**
             * @description Perform the Fraud assessment but do not act on the outcome.
             *                 Normally used for the initial launch while the data model is maturing.
             * @default false
             */
            silentMode: boolean;
            /** @description Device fingerprint provided by Threatmetrix. */
            tmxSessionId?: string;
            custom?: components["schemas"]["Custom"];
        };
        /** @description An object containing details about the recipient of funds, including name and address information, as well as recipient account details. In many use cases, the recipient is the same person as the sender (for example if your customer uses their card to load funds into their own crypto exchange or investment account). __Although an optional object in the API schema, `recipient` is required for some regions and use cases.__ */
        PaymentsFundsRecipient: {
            account?: components["schemas"]["PaymentsRecipientAccount"];
            /** @description Recipient's first name. */
            firstName?: string;
            /** @description Recipient's middle name. */
            middleName?: string;
            /** @description Recipient's last name. */
            lastName?: string;
            address?: components["schemas"]["PaymentsTransferAddress"];
            /**
             * Format: date
             * @description Recipient's date of birth
             */
            dateOfBirth?: string;
            /** @description Recipient's phone number */
            phoneNumber?: string;
            /** @description Required for domestic processing in some Latin American countries. */
            documentReference?: string;
        };
        /** @description An object containing details about the sender of funds, including name and address information. The sender account is always the card account declared within `instruction.paymentInstrument`. __Although an optional object in the API schema, `sender` is required for some regions and use cases.__ */
        PaymentsFundsSender: {
            /** @description Sender's first name. Must be supplied if `lastName` or `middleName` are provided. */
            firstName?: string;
            /** @description Sender's middle name. */
            middleName?: string;
            /** @description Sender's last name. Must be supplied if `firstName` or `middleName` are provided. */
            lastName?: string;
            address?: components["schemas"]["PaymentsTransferAddress"];
            /**
             * Format: date
             * @description Sender's date of birth
             */
            dateOfBirth?: string;
            /** @description Sender's document reference (e.g. Tax ID). Required for domestic processing in some Latin American countries. */
            documentReference?: string;
        };
        /** @description Contains details of the funds transfer request, which is a money movement for a reason other than the purchase of goods or services (also known as Account Funding Transaction (AFT)).
         *
         *     Read more on how to set it up under our [__Account Funding Transactions__](/products/access/payments/enable-features/account-funding-transactions) guide. */
        PaymentsFundsTransfer: {
            /**
             * @description Specifies the type of the funds transfer. {% admonition type="warning" name="Note" %} You may only submit the `fundsTransfer.type` values that relate to the use cases that you have been approved for by the schemes.{% /admonition %}
             * @enum {string}
             */
            type: "accountToAccount" | "cash" | "disbursement" | "personToPerson" | "purchase" | "topUp" | "walletLoad";
            /**
             * @description Specifies the purpose of the funds transfer. Required for some regions and use cases (eg crypto).
             * @enum {string}
             */
            purpose?: "businessToBusiness" | "creditCardRepayment" | "crypto" | "crowdLending" | "debitCard" | "education" | "emergency" | "familySupport" | "gift" | "giftCard" | "gaming" | "highRiskSecurities" | "liquidAssets" | "medical" | "payroll" | "prepaidCard" | "salary" | "savings" | "travel" | "other";
            recipient?: components["schemas"]["PaymentsFundsRecipient"];
            sender?: components["schemas"]["PaymentsFundsSender"];
        };
        /** @description If the order is being used to purchase a gift card. */
        PaymentsGiftCardsPurchase: {
            totalValue?: components["schemas"]["Value"];
            /**
             * Format: int32
             * @description The number of gift cards being purchased.
             */
            quantity?: number;
        };
        PaymentsInstallmentCustomerAgreement: Omit<WithRequired<components["schemas"]["PaymentsCustomerAgreement"], "type">, "type"> & {
            /** @enum {string} */
            type: "installment";
            /**
             * @description  Set to `first` to store a card or `subsequent` to use a previously stored card. Mandatory for `merchant` installment type.
             * @enum {string}
             */
            storedCardUsage?: "first" | "subsequent";
            /**
             * @description  Defines the type of installments service.
             *
             *     Read more on how to set up [__Latin America Installments__](/products/access/payments/enable-features/latam-installments) under our guide.
             * @enum {string}
             */
            installmentType: "merchant" | "latinAmerica";
            installmentPlan?: components["schemas"]["InstallmentPlan"];
            /**
             * @description Optional field available only for `subsequent` storedCardUsage. Unique reference provided by card schemes used to link the `first` and `subsequent` payments. If a Worldpay token was created as part of the first payment, this value is bundled with the token and does not need to be provided again. If you manage multiple agreements for a single cardholder using a token, please use the `schemeReference` returned to you. This allows you to distinguish and manage each separate agreement appropriately.
             * @example MCCOLXT1C0104
             */
            schemeReference?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "installment";
        };
        /** @description An object that contains all information related to the payment and API configurations. */
        PaymentsInstruction: {
            method: string;
            paymentInstrument: components["schemas"]["PaymentsCardPlainPaymentInstrument"] | components["schemas"]["SessionPaymentInstrument"] | components["schemas"]["TokenPaymentInstrument"] | components["schemas"]["WalletPaymentInstrument"];
            narrative: components["schemas"]["Narrative"];
            tokenCreation?: components["schemas"]["TokenCreation"];
            value: components["schemas"]["Value"];
            /** @description A flag which identifies a payment as being for the purpose of repaying a debt. */
            debtRepayment?: boolean;
            fraud?: components["schemas"]["PaymentsFraud"];
            threeDS?: components["schemas"]["PaymentsThreeDS"];
            exemption?: components["schemas"]["Exemption"];
            settlement?: components["schemas"]["Settlement"];
            customer?: components["schemas"]["Customer"];
            shipping?: components["schemas"]["Shipping"];
            customerAgreement?: components["schemas"]["PaymentsCardOnFileCustomerAgreement"] | components["schemas"]["PaymentsInstallmentCustomerAgreement"] | components["schemas"]["PaymentsSubscriptionCustomerAgreement"] | components["schemas"]["PaymentsUnscheduledCustomerAgreement"];
            recipient?: components["schemas"]["PaymentsRecipient"];
            /** @description An attribute that identifies a bill payment paid by providers on behalf of consumers. If you are registered with Visa as a Consumer of the Bill Payment Service (CBPS), you must set this to `true` for any payments associated with the CBPS. */
            consumerBillPayment?: boolean;
            /** @description Allows you to request a real-time account update (Visa cards only) when using a previously stored card. You can only use this on subsequent card requests. */
            requestAccountUpdater?: boolean;
        };
        PaymentsNetworkTokenPaymentInstrument: Omit<WithRequired<components["schemas"]["CardPaymentInstrument"], "type">, "type"> & {
            /** @enum {string} */
            type: "networkToken";
            /** @description The network token number. */
            tokenNumber: string;
            /** @description The name as shown on the card. */
            cardHolderName?: string;
            /** @description The single-use cryptogram provisioned for this payment. Required for all Customer Initiated Transactions (CITs). <br><br> __Note:__ If the `cryptogram` and `eci` are not provided, the Payments API will __automatically__ attempt to provision them. This will only be successful for Network Tokens created via Worldpay. For Network Tokens created via other gateways you must provide these. */
            cryptogram?: string;
            /** @description Electronic Commerce Indicator. */
            eci?: string;
            expiryDate: components["schemas"]["ExpiryDate"];
            billingAddress?: components["schemas"]["BillingAddress"];
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "networkToken";
        };
        /** @description An object containing Payment Facilitator information. This information is required for every authorization [__only if you are a Payment Facilitator__](/products/access/payments/enable-features/payment-facilitator) */
        PaymentsPaymentFacilitator: {
            /**
             * @description Your payment facilitator ID received from Mastercard, Visa and Amex.
             * @example 12345678901
             */
            schemeId: string;
            /**
             * @description Independent Sales Organization (ISO) ID provided by Mastercard.
             * @example 12345678901
             */
            independentSalesOrganizationId?: string;
            subMerchant: components["schemas"]["PaymentsSubMerchant"];
        };
        PaymentsPaymentInstrument: {
            /** @description The type of instrument. */
            type: string;
        };
        PaymentsPhoneAccount: Omit<WithRequired<components["schemas"]["PaymentsRecipientAccount"], "type">, "type"> & {
            /** @enum {string} */
            type: "phone";
            /** @description Recipient's phone number. */
            phoneNumber: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "phone";
        };
        /** @description An object containing information about the recipient of financial services. Required for MCC 6012 transactions in the Visa Europe region. The recipient may or may not be the cardholder.
         *
         *     Read more on how to set it up under our [__Financial Services__](/products/access/payments/enable-features/financial-services-mcc6012-mcc6051) guide. */
        PaymentsRecipient: {
            /** @description The account number of the recipient. Either a bank account number or a partial card number. */
            accountReference?: string;
            /** @description The last name of the recipient. */
            lastName?: string;
            address?: components["schemas"]["PaymentsRecipientAddress"];
            /**
             * Format: date
             * @description Recipient's date of birth.
             */
            dateOfBirth?: string;
        };
        /** @description An object for the account details of the recipient. */
        PaymentsRecipientAccount: {
            /** @description The type of account. */
            type: string;
        };
        PaymentsRecipientAddress: {
            /** @description The postal code of the recipient. Relevant only in the UK. */
            postalCode?: string;
        };
        PaymentsShippingAddress: {
            /** @description Address line 1 */
            address1: string;
            /** @description Address line 2 */
            address2?: string;
            /** @description Address line 3 */
            address3?: string;
            /** @description Address PostalCode */
            postalCode: string;
            /** @description Address City */
            city: string;
            /** @description Address State */
            state?: string;
            /**
             * Format: ISO 3166-1 alpha-2
             * @description The supported ISO 3166-1 alpha-2 country code
             */
            countryCode: string;
        };
        PaymentsSocialNetworkAccount: Omit<WithRequired<components["schemas"]["PaymentsRecipientAccount"], "type">, "type"> & {
            /** @enum {string} */
            type: "socialNetwork";
            /** @description A reference identifying recipient's social network account. */
            socialNetworkReference: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "socialNetwork";
        };
        /** @description Your sub-merchant's details. */
        PaymentsSubMerchant: {
            /**
             * @description The name of your subMerchant's company.
             * @example Merchant Plc
             */
            name: string;
            /**
             * @description Unique merchant reference.
             * @example 123456789012345
             */
            reference: string;
            address: components["schemas"]["PaymentsSubMerchantAddress"];
            /**
             * @description Phone number of your subMerchant's company.
             * @example 987-65-4321
             */
            phoneNumber?: string;
            /**
             * @description Tax Reference of your subMerchant's company.
             * @example 987-65-4321
             */
            taxReference?: string;
            /**
             * @description Email address of your subMerchant's company.
             * @example email@example.com
             */
            email?: string;
        };
        /** @description Contains the subMerchant address information. */
        PaymentsSubMerchantAddress: {
            /**
             * @description Post code/Zip code of your subMerchant's company.
             * @example SW1 1AA
             */
            postalCode: string;
            /**
             * @description Street name of your subMerchant's company.
             * @example 221B Baker Street
             */
            street: string;
            /**
             * @description City of your subMerchant's company.
             * @example London
             */
            city: string;
            /**
             * @description State of your subMerchant's company.
             * @example GB
             */
            state?: string;
            /**
             * @description Country code of your subMerchant's company in [ISO 3166-1 Alpha-2 format](/products/access/reference/supported-countries-currencies#iso-country-codes).
             * @example GB
             */
            countryCode: string;
        };
        PaymentsSubscriptionCustomerAgreement: Omit<WithRequired<components["schemas"]["PaymentsCustomerAgreement"], "type">, "type"> & {
            /** @enum {string} */
            type: "subscription";
            /**
             * @description  Set to `first` to store a card or `subsequent` to use a previously stored card.
             * @enum {string}
             */
            storedCardUsage: "first" | "subsequent";
            /**
             * @description Optional field available only for `subsequent` storedCardUsage. Unique reference provided by card schemes used to link the `first` and `subsequent` payments. If a Worldpay token was created as part of the first payment, this value is bundled with the token and does not need to be provided again. If you manage multiple agreements for a single cardholder using a token, please use the `schemeReference` returned to you. This allows you to distinguish and manage each separate agreement appropriately.
             * @example MCCOLXT1C0104
             */
            schemeReference?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "subscription";
        };
        /** @description An object containing 3DS authentication preferences.
         *
         *     Read more on how to set it up under our [__3DS Authentication__](/products/access/payments/enable-features/3ds-authentication) guide. */
        PaymentsThreeDS: {
            /** @enum {string} */
            type: "integrated";
            /** @enum {string} */
            mode: "always";
            challenge: components["schemas"]["Challenge"];
            deviceData: components["schemas"]["DeviceData"];
            /**
             * @description Attempt authorization (without liability shift) using an authentication outage exemption in the event of a 3DS network failure. Even with this boolean set it is not currently part of default merchant setup. See [how to enable authentication outage exemptions](/products/access/payments/enable-features/3ds-authentication#how-to-enable-authentication-outage-exemptions)
             * @default false
             */
            exemptionOnOutage: boolean;
            /** @description Has the account been flagged for suspicious activity. */
            previousSuspiciousActivity?: boolean;
            /** @enum {string} */
            userType?: "guestUser" | "registeredUser" | "federatedAccount" | "issuerCredentials" | "thirdPartyAuthentication" | "fidoAuthenticator";
            accountHistory?: components["schemas"]["AccountHistory"];
            /** @description Repeat of a previous order. */
            reorder?: boolean;
            /** @description Expected date that a pre-ordered purchase will be available. */
            preOrderDate?: string;
            transactionHistory?: components["schemas"]["TransactionHistory"];
            giftCardsPurchase?: components["schemas"]["PaymentsGiftCardsPurchase"];
        };
        /** @description Sender's address. */
        PaymentsTransferAddress: {
            /** @description Must be supplied if `city` is provided. */
            address1?: string;
            address2?: string;
            /** @description Must be supplied if `address1` is provided. */
            city?: string;
            postalCode?: string;
            /** @description 1-3 alphanumeric characters and spaces. */
            state?: string;
            /**
             * Format: ISO 3166-1 alpha-2
             * @description Country code in [ISO 3166-1 Alpha-2 format](/products/access/reference/supported-countries-currencies#iso-country-codes).
             */
            countryCode: string;
        };
        PaymentsUnscheduledCustomerAgreement: Omit<WithRequired<components["schemas"]["PaymentsCustomerAgreement"], "type">, "type"> & {
            /** @enum {string} */
            type: "unscheduled";
            /**
             * @description Unique reference provided by card schemes used to link the `first` and `subsequent` payments. This value is bundled with the Worldpay token if created as part of the `first` payment and therefore not required here as well. If you manage multiple agreements for a single cardholder using a token, please use the `schemeReference` returned to you. This allows you to distinguish and manage each separate agreement appropriately.
             * @example MCCOLXT1C0104
             */
            schemeReference?: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "unscheduled";
        };
        PaymentsWalletAccount: Omit<WithRequired<components["schemas"]["PaymentsRecipientAccount"], "type">, "type"> & {
            /** @enum {string} */
            type: "wallet" | "storedValueWallet" | "stagedDigitalWallet" | "merchantWallet";
            /** @description A reference identifying the destination wallet. */
            walletReference: string;
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "wallet" | "storedValueWallet" | "stagedDigitalWallet" | "merchantWallet";
        };
        /** @description An object containing specific routing preferences. */
        Routing: {
            /**
             * @description Specifies your customer's preferred card brand to be used for the transaction using a co-badged card.
             * @enum {string}
             */
            preferredCardBrand?: "visa" | "mastercard" | "maestro" | "amex" | "cartesBancaires" | "diners" | "dankort" | "jcb" | "discover" | "elo" | "eftposAU";
        };
        SessionPaymentInstrument: {
            type: "SessionPaymentInstrument";
        } & (Omit<WithRequired<components["schemas"]["PaymentsPaymentInstrument"], "type">, "type"> & {
            /** @enum {string} */
            type: "checkout";
            /** @description
             *     An http address that contains your Checkout session providing the card details. */
            sessionHref: string;
            /**
             * @description
             *
             *     The name on your customer's card. Required if  instruction.tokenCreation is present. However we recommend that you supply this to improve authentication rates.
             * @example Sherlock Holmes
             */
            cardHolderName?: string;
            billingAddress?: components["schemas"]["BillingAddress"];
            routing?: components["schemas"]["Routing"];
        });
        /** @description Automatically settle a payment following authorization. If any of the AVS/CVC response riskFactors are marked as `notMatched` the payment will be `sentForCancellation` automatically.
         *
         *     Read more on how to set it up under our [__Auto Settlement__](/products/access/payments/enable-features/auto-settlement) guide. */
        Settlement: {
            auto: boolean;
            cancelOn?: components["schemas"]["Cancellation"];
        };
        Shipping: {
            /**
             * @description The shipping method used.
             * @enum {string}
             */
            method?: "billingAddress" | "verifiedAddress" | "otherAddress" | "store" | "digital" | "unshippedTickets" | "other";
            /** @enum {string} */
            timeFrame?: "electronic" | "sameDay" | "nextDay" | "twoDaysPlus";
            /** @description The email address used for an electronic delivery. */
            email?: string;
            /** @description The phone number used for delivery. */
            phone?: string;
            /** @description First name used on the shipping address. */
            firstName?: string;
            /** @description Last name used on the shipping address. */
            lastName?: string;
            address?: components["schemas"]["PaymentsShippingAddress"];
        };
        /** @description Use this object if you want to create a token after the payment. Can only be used with paymentInstrument.type: card/plain & checkout. */
        TokenCreation: {
            /** @enum {string} */
            type: "worldpay";
            /** @description  A namespace is used to group up to 16 cards, e.g. for one customer. A card can exist in more than one namespace.  */
            namespace?: string;
            /** @description  A description of your token. If not supplied, a default description is created for you.  */
            description?: string;
        };
        TokenPaymentInstrument: {
            type: "TokenPaymentInstrument";
        } & (Omit<WithRequired<components["schemas"]["PaymentsPaymentInstrument"], "type">, "type"> & {
            /** @enum {string} */
            type: "token";
            /** @description An http address that contains your link to an Access Token. */
            href: string;
            /**
             * @description
             *
             *     CVC is a unique set of 3 or 4 numbers on the back of the card. Our API checks to see if the CVC supplied matches the CVC held by the issuing bank.
             * @example 123
             */
            cvc?: string;
            /**
             * @description
             *
             *     Href to the Checkout session providing the Card Verification Code (CVC).__Note:__ Provide a value in `cvcSessionHref` or `cvc`, never both.
             * @example https://try.access.worldpay.com/sessions/eyJrIjoxLCJkIjoiNjQxbUsw...
             */
            cvcSessionHref?: string;
            routing?: components["schemas"]["Routing"];
        });
        /** @description Object containing details of the last transaction. */
        TransactionHistory: {
            /**
             * Format: int32
             * @description  Number of transactions (successful or abandoned) for this cardholder account within the last 24 hours.
             */
            attemptsLastDay?: number;
            /**
             * Format: int32
             * @description  Number of transactions (successful or abandoned) for this cardholder account within the last year.
             */
            attemptsLastYear?: number;
            /**
             * Format: int32
             * @description  Number of purchases with this customer account during the previous six months.
             */
            completedLastSixMonths?: number;
            /**
             * Format: int32
             * @description Number of attempts to add a card in the last 24hrs.
             */
            addCardsLastDay?: number;
            /** @description  When the shipping address used for the transaction was first used.  */
            shippingAddressFirstUsedAt?: string;
        };
        WalletPaymentInstrument: {
            /**
             * @description The type of instrument.
             * @enum {string}
             */
            type: "encrypted";
            walletToken: string;
            billingAddress?: components["schemas"]["BillingAddress"];
        };
        PaymentsResponse202: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
        };
        DeviceDataCollection: {
            /**
             * @description  A digitally signed token that contains additional details required for DDC.
             * @example
             *
             *     eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJPcmdVbml0SWQiOiI2NjAzMDA3YWJlMjMxZTM1ZTNmNTRjODkiLCJpc3MiOiI2NjAzMDA3YTE2ZGQ5YTdlNmEwMzM0MDciLCJleHAiOjE3MTIyNDg3MTIsImlhdCI6MTcxMjI0ODExMiwianRpIjoiZjdjZGVhZWUtMTY4MS00NjlhLTgxZmEtMzBkY2MyOTYzODA3In0.T1a6hOCPVVsQmcCKU3eczwmxlHoWK83tUqIJ_VG4fwc
             */
            jwt: string;
            /**
             * @description  A `POST` action on the DDC form. Used to redirect to the issuers DDC page. This URL can could change so should not be hardcoded.
             * @example https://centinelapistag.cardinalcommerce.com/V1/Cruise/Collect
             */
            url: string;
            /**
             * @description  First six digits of the card number (Bank Identification Number), used as part of DDC.
             * @example 400000
             */
            bin: string;
        };
        DeviceDataRequiredActionList: {
            supply3dsDeviceData?: components["schemas"]["PaymentsActionSupply3dsDeviceData"];
        };
        DeviceDataRequiredResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
            deviceDataCollection?: components["schemas"]["DeviceDataCollection"];
            _actions?: components["schemas"]["DeviceDataRequiredActionList"];
        };
        FraudHighRiskResponse: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
            /**
             * Format: double
             * @description  Percentage assessment score for the transaction. Higher the value the greater the assessed risk. The outcome value is based on the thresholds configured using this score.
             */
            score?: number;
            /** @description  Short description of the reason for the outcome. A reason can be returned for any 'outcome', even lowRisk.  */
            reason?: string[];
        };
        /** @description Supply the 3DS device data collectionReference (SessionId) to continue the payment. See [details](../3ds-actions/supply3dsdevicedata) including what to add in the request body. */
        PaymentsActionSupply3dsDeviceData: {
            href?: string;
            /** @default POST */
            method: string;
        };
        PaymentsResponse201: {
            /** @enum {string} */
            outcome?: "3dsDeviceDataRequired" | "authorized" | "3dsChallenged" | "sentForSettlement" | "sentForCancellation" | "refused" | "3dsAuthenticationFailed" | "3dsUnavailable" | "fraudHighRisk" | "sentForRefund" | "sentForPartialRefund";
            /** @description  A unique reference generated by you that is used to identify a payment throughout its lifecycle.  */
            transactionReference?: string;
        };
        QueryActionList: {
            cancelPayment?: components["schemas"]["PaymentsActionCancel"];
            partiallySettlePayment?: components["schemas"]["PaymentsActionPartialSettle"];
            settlePayment?: components["schemas"]["PaymentsActionSettle"];
            refundPayment?: components["schemas"]["PaymentsActionRefund"];
            partiallyRefundPayment?: components["schemas"]["PaymentsActionPartialRefund"];
        };
        QueryEventsResponse: {
            lastEvent?: string;
            _actions?: components["schemas"]["QueryActionList"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    payment: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description The API version
                 * @example 2024-06-01
                 */
                "WP-Api-Version": "2024-06-01";
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentsResponse201"];
                };
            };
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentsResponse202"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HeaderErrorResponse"];
                };
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    supply3dsDeviceData: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description The API version
                 * @example 2024-06-01
                 */
                "WP-Api-Version": "2024-06-01";
            };
            path: {
                linkData: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeviceDataRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceDataResponse201"];
                };
            };
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceDataResponse202"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HeaderErrorResponse"];
                };
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    complete3dsChallenge: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description The API version
                 * @example 2024-06-01
                 */
                "WP-Api-Version": "2024-06-01";
            };
            path: {
                linkData: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChallengeResponse201"];
                };
            };
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChallengeResponse202"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HeaderErrorResponse"];
                };
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    queryEvents: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description The API version
                 * @example 2024-06-01
                 */
                "WP-Api-Version": "2024-06-01";
            };
            path: {
                linkData: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryEventsResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    settle: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description The API version
                 * @example 2024-06-01
                 */
                "WP-Api-Version": "2024-06-01";
            };
            path: {
                linkData: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SettleRequest"];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettleResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HeaderErrorResponse"];
                };
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    partialSettle: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description The API version
                 * @example 2024-06-01
                 */
                "WP-Api-Version": "2024-06-01";
            };
            path: {
                linkData: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentsPartialSettleRequest"];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartialSettleResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HeaderErrorResponse"];
                };
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    refund: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description The API version
                 * @example 2024-06-01
                 */
                "WP-Api-Version": "2024-06-01";
            };
            path: {
                linkData: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RefundRequest"];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefundResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HeaderErrorResponse"];
                };
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    partialRefund: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description The API version
                 * @example 2024-06-01
                 */
                "WP-Api-Version": "2024-06-01";
            };
            path: {
                linkData: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentsPartialRefundRequest"];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PartialRefundResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HeaderErrorResponse"];
                };
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    cancel: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description The API version
                 * @example 2024-06-01
                 */
                "WP-Api-Version": "2024-06-01";
            };
            path: {
                linkData: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CancelRequest"];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not acceptable */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HeaderErrorResponse"];
                };
            };
            /** @description Unsupported media type */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
